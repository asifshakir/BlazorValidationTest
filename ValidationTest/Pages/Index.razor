@page "/"
@using Microsoft.Extensions.Logging
@inject ILogger<Index> Logger

<PageTitle>Index</PageTitle>

<h2>New Ship Entry Form</h2>

<EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        <label>
            Identifier:
            <InputText @bind-Value="starship.Identifier" />
        </label>
    </p>

    <p>
        <label>
            Maximum Accommodation:
            <InputNumber @bind-Value="starship.MaximumAccommodation" />
        </label>
    </p>

    <button type="submit">Submit</button>

    <p>
        <a href="http://www.startrek.com/">Star Trek</a>,
        ©1966-2019 CBS Studios, Inc. and
        <a href="https://www.paramount.com">Paramount Pictures</a>
    </p>
</EditForm>

@code {
    private Starship starship =
    new()
            {
                Identifier = "NCC-1701",
                Classification = "Exploration",
                MaximumAccommodation = 150,
                IsValidatedDesign = true,
                ProductionDate = new DateTime(2245, 4, 11)
            };
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        editContext = new(starship);
        editContext.OnValidationRequested += ValidateLoanApplication;
        messageStore = new(editContext);
    }

    private void ValidateLoanApplication(object? sender,
        ValidationRequestedEventArgs args)
    {
        if (editContext is null || messageStore is null) return;

        messageStore.Clear();

        ValidateLoanApplication(messageStore, editContext, starship);
    }

    private async void ValidateLoanApplication(
        ValidationMessageStore messageStore, 
        EditContext editContext, 
        Starship starship)
    {
        // Custom validation logic
        await ValidateLargeString(
                messageStore,
                editContext.Field(nameof(starship.Identifier)),
                starship.Identifier ?? string.Empty,
                5);

        await ValidateEmptyString(
                messageStore, 
                editContext.Field(nameof(starship.Identifier)), 
                starship.Identifier ?? string.Empty);

        await ValidateNumber(
                messageStore,
                editContext.Field(nameof(starship.MaximumAccommodation)),
                starship.MaximumAccommodation);
    }

    private async Task ValidateEmptyString(
        ValidationMessageStore messageStore, 
        FieldIdentifier fieldIdentifier, 
        string? fieldValue)
    {
        if (messageStore == null || messageStore[fieldIdentifier].Any()) return;
        
        if (string.IsNullOrEmpty(fieldValue))
        {
            messageStore.Add(fieldIdentifier, $"{fieldIdentifier.FieldName} cannot be empty.");
        }

        await Task.CompletedTask;
    }

    private async Task ValidateNumber(
        ValidationMessageStore messageStore,
        FieldIdentifier fieldIdentifier,
        int fieldValue)
    {
        if (messageStore == null || messageStore[fieldIdentifier].Any()) return;

        if (fieldValue > 100)
        {
            messageStore.Add(fieldIdentifier, $"{fieldIdentifier.FieldName} is not a valid number.");
        }

        await Task.CompletedTask;
    }


    private async Task ValidateLargeString(ValidationMessageStore messageStore, FieldIdentifier fieldIdentifier, string fieldValue, int Size)
    {
        await ValidateEmptyString(messageStore, fieldIdentifier, fieldValue);

        if (messageStore == null || messageStore[fieldIdentifier].Any()) return;
        if (fieldValue.Length > Size)
        {
            messageStore.Add(fieldIdentifier, $"{fieldIdentifier.FieldName} cannot be more than five characters.");
        }

        await Task.CompletedTask;

    }


    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("HandleSubmit called: Form is valid");
        await Task.CompletedTask;
    }
}